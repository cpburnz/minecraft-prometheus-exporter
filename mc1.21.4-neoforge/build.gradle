plugins {
	// Java Library plugin.
	id 'java-library'

	// Eclipse plugin (makes life easier using Eclipse).
	id 'eclipse'

	// IDEA plugin (makes life easier using IntelliJ IDEA).
	id 'idea'

	// NeoForge Gradle plugin (required).
	id 'net.neoforged.gradle.userdev' version '7.0.181'

	// Shadow Jar plugin: bundle dependencies.
	id 'com.gradleup.shadow' version '8.3.0'

	// CurseForge plugin.
	id 'net.darkhax.curseforgegradle' version '1.1.26'

	// GitHub plugin.
	id 'com.github.breadmoirai.github-release' version '2.5.2'
}

// Load "mod.properties".
var mod_props = new Properties();
file("../mod.properties").withInputStream { mod_props.load(it) }

var mod_authors = mod_props.getProperty('mod_authors')
var mod_group_id = mod_props.getProperty('mod_group_id')
var mod_id = mod_props.getProperty('mod_id')
var mod_logo_file = mod_props.getProperty('mod_logo_file')
var mod_name = mod_props.getProperty('mod_name')
var mod_package = mod_props.getProperty('mod_package')
var mod_version = mod_props.getProperty('mod_version')

// Set project settings.
group = mod_group_id
version = mod_version

base {
	archivesName = 'Prometheus-Exporter'
}

// Mojang ships Java 21 to end users starting in 1.20.5, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

//minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
	// applies to all the run configs below
	configureEach {
		// Recommended logging data for a userdev environment
		// The markers can be added/remove as needed separated by commas.
		// "SCAN": For mods scan.
		// "REGISTRIES": For firing of registry events.
		// "REGISTRYDUMP": For getting the contents of all registries.
		systemProperty 'forge.logging.markers', 'REGISTRIES'

		// Recommended logging level for the console
		// You can set various levels here.
		// Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
		systemProperty 'forge.logging.console.level', 'debug'

		modSource project.sourceSets.main

		dependencies {
			// Every shadowed dependency has to be relisted here for the runClient and
			// runServer commands to work.
			runtime 'io.prometheus:simpleclient:0.16.0'
			runtime 'io.prometheus:simpleclient_common:0.16.0'
			runtime 'io.prometheus:simpleclient_httpserver:0.16.0'
			runtime 'io.prometheus:simpleclient_hotspot:0.16.0'
		}
	}

	client {
		// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
		systemProperty 'neoforge.enabledGameTestNamespaces', mod_id
	}

	server {
		systemProperty 'neoforge.enabledGameTestNamespaces', mod_id
		argument '--nogui'
	}

	// This run config launches GameTestServer and runs all registered gametests, then exits.
	// By default, the server will crash when no gametests are provided.
	// The gametest system is also enabled by default for other run configs under the /test command.
	gameTestServer {
		systemProperty 'neoforge.enabledGameTestNamespaces', mod_id
	}

	clientData {
		// example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
		// workingDirectory project.file('run-data')

		// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
		arguments.addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
	}
}

// Include shared sources.
sourceSets.main.java {
	srcDir "$projectDir/../src/base/mc1.21.0/java"
	srcDir "$projectDir/../src/neoforge/mc1.21.0/java"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
	// Sets up a dependency configuration called 'localRuntime'.
	// This configuration should be used instead of 'runtimeOnly' to declare
	// a dependency that will be present for runtime testing but that is
	// "optional", meaning it will not be pulled by dependents of this mod.
	runtimeClasspath.extendsFrom localRuntime

	// Create the `compileAndShadow` group to be both compile time dependencies
	// and shadow dependencies (bundle via Shadow Jar).
	compileAndShadow
	compile.extendsFrom compileAndShadow
	shadow.extendsFrom compileAndShadow
}

dependencies {
	// Specify the version of Minecraft to use.
	// Depending on the plugin applied there are several options. We will assume you applied the userdev plugin as shown above.
	// The group for userdev is net.neoforged, the module name is neoforge, and the version is the same as the neoforge version.
	// You can however also use the vanilla plugin (net.neoforged.gradle.vanilla) to use a version of Minecraft without the neoforge loader.
	// And its provides the option to then use net.minecraft as the group, and one of; client, server or joined as the module name, plus the game version as version.
	// For all intends and purposes: You can treat this dependency as if it is a normal library you would use.
	implementation "net.neoforged:neoforge:${neo_version}"

	// Example optional mod dependency with JEI
	// The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
	// compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
	// compileOnly "mezz.jei:jei-${mc_version}-neoforge-api:${jei_version}"
	// We add the full version to localRuntime, not runtimeOnly, so that we do not publish a dependency on it
	// localRuntime "mezz.jei:jei-${mc_version}-neoforge:${jei_version}"

	// Example mod dependency using a mod jar from ./libs with a flat dir repository
	// This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
	// The group id is ignored when searching -- in this case, it is "blank"
	// implementation "blank:coolmod-${mc_version}:${coolmod_version}"

	// Example mod dependency using a file as dependency
	// implementation files("libs/coolmod-${mc_version}-${coolmod_version}.jar")

	// Example project dependency using a sister or child project:
	// implementation project(":myproject")

	// For more info:
	// http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
	// http://www.gradle.org/docs/current/userguide/dependency_management.html

	// Prometheus dependencies.
	compileAndShadow group: 'io.prometheus', name: 'simpleclient', version: '0.16.0'
	compileAndShadow group: 'io.prometheus', name: 'simpleclient_httpserver', version: '0.16.0'
	compileAndShadow group: 'io.prometheus', name: 'simpleclient_hotspot', version: '0.16.0'
}

// Expand variables in resource files.
//
// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
processResources {
	var replaceProperties = [
		loader_version_range: loader_version_range,
		minecraft_version_range: minecraft_version_range,
		mod_authors: mod_authors,
		mod_description: mod_props.getProperty('mod_description'),
		mod_id: mod_id,
		mod_license: mod_props.getProperty('mod_license'),
		mod_logo_file: mod_logo_file,
		mod_name: mod_name,
		mod_tracker_url: mod_props.getProperty('mod_tracker_url'),
		mod_url: mod_props.getProperty('mod_url'),
		mod_version: mod_version,
		neo_version_range: neo_version_range,
	]

	// Record the inputs so Gradle knows when to regenerate the resource files.
	inputs.properties replaceProperties

	filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
		expand replaceProperties
	}

	// Copy logo.
	with copySpec {
		from "$projectDir/../Prometheus_Exporter.png"
		rename 'Prometheus_Exporter.png', mod_logo_file
	}
}

// Project JAR settings.
jar {
	// Include the Minecraft version in the JAR name.
	archiveAppendix = "${minecraft_version}-neoforge"

	manifest {
		attributes([
			'Specification-Title': mod_id,
			'Specification-Vendor': mod_authors,
			'Specification-Version': mod_version,
			'Implementation-Title': mod_name,
			'Implementation-Version': mod_version,
			'Implementation-Vendor': mod_authors,
			'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}

	// This is the preferred method to reobfuscate/finalize your jar file.
	finalizedBy 'shadowJar'
}

// Configure Shadow Jar.
shadowJar {
	// Remove JAR suffix.
	archiveAppendix = tasks.jar.archiveAppendix
	archiveClassifier = tasks.jar.archiveClassifier

	// Relocate shadowed dependencies.
	enableRelocation = true
	relocationPrefix = "${mod_package}.vendor"

	// Only bundle dependencies explicitly marked to shadow.
	configurations = [project.configurations.shadow]

	// Exclude unused classes.
	minimize()
}

tasks.shadowJar.dependsOn tasks.jar
tasks.assemble.dependsOn tasks.shadowJar

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
	module {
		downloadSources = true
		downloadJavadoc = true
	}
}

// Publish release to CurseForge.
import net.darkhax.curseforgegradle.TaskPublishCurseForge
tasks.register('publishCurseForge', TaskPublishCurseForge) {
	var curseforge_token = System.env.CURSEFORGE_TOKEN
	var project_id = mod_props.getProperty('curseforge_project_id')

	apiToken = curseforge_token

	upload(project_id, shadowJar.archiveFile) {
		changelog = file('CHANGES.md').filterLine {
			!it.startsWith('Change History') && !it.startsWith('====')
		}.toString()
		changelogType = 'markdown'
		releaseType = 'release'

		addEnvironment 'Server'
	}
}

// Publish release to GitHub.
githubRelease {
	var github_branch = mod_props.getProperty('github_branch')
	var github_token = System.env.GITHUB_TOKEN
	var github_url = mod_props.getProperty('github_url')
	var release_dir = "mc${minecraft_version_tag}-neoforge"
	var changes_url = "${github_url}/blob/${github_branch}/${release_dir}/CHANGES.md"

	body = "Release v${mod_version} for Minecraft ${minecraft_version_tag} with NeoForge ${neo_version_min}. See [CHANGES.md](${changes_url})."
	draft = false
	releaseAssets = shadowJar.archiveFile
	releaseName = "Minecraft ${minecraft_version_tag} (NeoForge) / v${mod_version}"
	repo = 'minecraft-prometheus-exporter'
	tagName = "${minecraft_version_tag}-neoforge-${mod_version}"
	targetCommitish = github_branch
	token = github_token ?: ""
}

// Alias for publishing to GitHub.
tasks.register('publishGithub')
tasks.publishGithub.dependsOn tasks.githubRelease
