// Forge buildscript.
buildscript {
	// Buildscript Maven repositories.
	repositories {
		// Forge.
		maven {
			url = 'https://files.minecraftforge.net/maven'
		}

		// JCenter.
		//jcenter()

		// Maven Central.
		mavenCentral()
	}

	// Buildscript dependencies.
	dependencies {
		// Forge Gradle plugin.
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
	}
}

plugins {
	// Eclipse plugin (makes life easier using Eclipse).
	id 'eclipse'

	// IDEA plugin (makes life easier using IntelliJ IDEA).
	id 'idea'

	// Java plugin (required).
	id 'java'

	// Shadow Jar plugin: bundle dependencies.
	// - NOTICE: v6.1.0 is the last version supported by Gradle 6.
	id 'com.github.johnrengelman.shadow' version '6.1.0'

	// CurseForge plugin.
	// - NOTICE: v1.1.24 is that last version that appears to work with Gradle 6.
	id 'net.darkhax.curseforgegradle' version '1.1.24'

	// GitHub plugin.
	id 'com.github.breadmoirai.github-release' version '2.2.12'
}

// Forge Gradle plugin (required).
apply plugin: 'net.minecraftforge.gradle'

// Load "mod.properties".
def mod_props = new Properties();
file("../mod.properties").withInputStream { mod_props.load(it)}

def mod_authors = mod_props.getProperty('mod_authors')
def mod_group_id = mod_props.getProperty('mod_group_id')
def mod_id = mod_props.getProperty('mod_id')
def mod_logo_file = mod_props.getProperty('mod_logo_file')
def mod_name = mod_props.getProperty('mod_name')
def mod_package = mod_props.getProperty('mod_package')
def mod_version = mod_props.getProperty('mod_version')

// Set project settings.
archivesBaseName = 'Prometheus-Exporter'
group = mod_group_id
version = mod_version

java.toolchain.languageVersion = JavaLanguageVersion.of(8)
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
	// The mappings can be changed at any time and must be in the following format.
	// Channel:   Version:
	// official   MCVersion  Official field/method names from Mojang mapping files
	// parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
	//
	// You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
	// See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
	//
	// Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
	// Additional setup is needed to use their mappings: https://github.com/ParchmentMC/Parchment/wiki/Getting-Started
	//
	// Use non-default mappings at your own risk. They may not always work.
	// Simply re-run your setup task after changing the mappings to update your workspace.
	mappings channel: project.mapping_channel, version: project.mapping_version

	// This property enables access transformers for use in development.
	// They will be applied to the Minecraft artifact.
	// The access transformer file can be anywhere in the project.
	// However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
	// This default location is a best practice to automatically put the file in the right place in the final jar.
	// See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
	// accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	// Default run configurations.
	// These can be tweaked, removed, or duplicated as needed.
	runs {
		// applies to all the run configs below
		configureEach {
			workingDirectory project.file('run')

			// Recommended logging data for a userdev environment
			// The markers can be added/remove as needed separated by commas.
			// "SCAN": For mods scan.
			// "REGISTRIES": For firing of registry events.
			// "REGISTRYDUMP": For getting the contents of all registries.
			property 'forge.logging.markers', 'REGISTRIES'

			// Recommended logging level for the console
			// You can set various levels here.
			// Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
			property 'forge.logging.console.level', 'debug'

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}

		client {
			// this block needs to be here for runClient to exist
		}

		server {
			args '--nogui'
		}

		data {
			// example of overriding the workingDirectory set in configureEach above
			workingDirectory project.file('run-data')

			// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
			args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
		}
	}
}

// Include shared sources.
sourceSets.main.java {
	srcDir "$projectDir/../src/base/mc1.16.0/java"
	srcDir "$projectDir/../src/forge/mc1.16.0/java"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
	// Create the `compileAndShadow` group to be both compile time dependencies
	// and shadow dependencies (bundle via Shadow Jar).
	compileAndShadow
	compile.extendsFrom compileAndShadow
	shadow.extendsFrom compileAndShadow
}

repositories {
	// Put repositories for dependencies here
	// ForgeGradle automatically adds the Forge maven and Maven Central for you

	// If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
	// flatDir {
	//     dir 'libs'
	// }
}

dependencies {
	// Specify the version of Minecraft to use.
	// Any artifact can be supplied so long as it has a "userdev" classifier artifact and is a compatible patcher artifact.
	// The "userdev" classifier will be requested and setup by ForgeGradle.
	// If the group id is "net.minecraft" and the artifact id is one of ["client", "server", "joined"],
	// then special handling is done to allow a setup of a vanilla dependency without the use of an external repository.
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

	// Real mod deobf dependency examples - these get remapped to your current mappings
	// compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
	// runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
	// implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

	// Example mod dependency using a mod jar from ./libs with a flat dir repository
	// This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
	// The group id is ignored when searching -- in this case, it is "blank"
	// implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

	// For more info:
	// http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
	// http://www.gradle.org/docs/current/userguide/dependency_management.html

	// Prometheus dependencies.
	compileAndShadow group: 'io.prometheus', name: 'simpleclient', version: '0.16.0'
	compileAndShadow group: 'io.prometheus', name: 'simpleclient_httpserver', version: '0.16.0'
	compileAndShadow group: 'io.prometheus', name: 'simpleclient_hotspot', version: '0.16.0'
}

// Expand variables in resource files.
processResources {
	def replaceProperties = [
		forge_version_range: forge_version_range,
		loader_version_range: loader_version_range,
		minecraft_version_range: minecraft_version_range,
		mod_authors: mod_authors,
		mod_description: mod_props.getProperty('mod_description'),
		mod_id: mod_id,
		mod_license: mod_props.getProperty('mod_license'),
		mod_logo_file: mod_logo_file,
		mod_name: mod_name,
		mod_tracker_url: mod_props.getProperty('mod_tracker_url'),
		mod_url: mod_props.getProperty('mod_url'),
		mod_version: mod_version,
	]

	// Record the inputs so Gradle knows when to regenerate the resource files.
	inputs.properties replaceProperties

	filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
		expand replaceProperties + [project: project]
	}

	// Copy logo.
	with copySpec {
		from "$projectDir/../Prometheus_Exporter.png"
		rename 'Prometheus_Exporter.png', mod_logo_file
	}
}

// Project JAR settings.
jar {
	// Include the Minecraft version in the JAR name.
	archiveAppendix = "${minecraft_version}-forge"

	manifest {
		attributes([
			'Specification-Title': mod_id,
			'Specification-Vendor': mod_authors,
			'Specification-Version': mod_version,
			'Implementation-Title': mod_name,
			'Implementation-Version': mod_version,
			'Implementation-Vendor': mod_authors,
			'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}

	// This is the preferred method to reobfuscate/finalize your jar file.
	finalizedBy 'reobfShadowJar'
}

// Configure Shadow Jar.
shadowJar {
	// Remove JAR suffix.
	archiveAppendix = tasks.jar.archiveAppendix
	archiveClassifier = tasks.jar.archiveClassifier

	// Only bundle dependencies explicitly marked to shadow.
	configurations = [project.configurations.shadow]

	// Exclude unused classes.
	minimize()
}

// Vendor dependencies with Shadow Jar.
import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation
tasks.register('vendorShadowJarDeps', ConfigureShadowRelocation) {
	target = tasks.shadowJar
	prefix = "${mod_package}.vendor"
}

tasks.shadowJar.dependsOn tasks.vendorShadowJarDeps

// Reobfuscate the Shadow Jar because the Minecraft classes must be
// obfuscated.
reobf {
	jar {
		// Disable generation of unshadowed obfuscated JAR.
		enabled = false
	}
	shadowJar {
		enabled = true
	}
}

tasks.reobfShadowJar.dependsOn tasks.jar
tasks.assemble.dependsOn tasks.reobfShadowJar

// Publish release to CurseForge.
import net.darkhax.curseforgegradle.TaskPublishCurseForge
tasks.register('publishCurseForge', TaskPublishCurseForge) {
	def curseforge_token = System.env.CURSEFORGE_TOKEN
	def project_id = mod_props.getProperty('curseforge_project_id')

	apiToken = curseforge_token
	debugMode = false

	upload(project_id, shadowJar.archiveFile) {
		changelog = file('CHANGES.md').filterLine {
			!it.startsWith('Change History') && !it.startsWith('====')
		}.toString()
		changelogType = 'markdown'
		releaseType = 'release'

		addEnvironment 'Server'
	}
}

// Publish release to GitHub.
githubRelease {
	def github_branch = mod_props.getProperty('github_branch')
	def github_token = System.env.GITHUB_TOKEN
	def github_url = mod_props.getProperty('github_url')
	def release_dir = "mc${minecraft_version_tag}-forge"
	def changes_url = "${github_url}/blob/${github_branch}/${release_dir}/CHANGES.md"

	body = "Release v${mod_version} for Minecraft ${minecraft_version_tag} with Forge ${forge_version_min}. See [CHANGES.md](${changes_url})."
	draft = false
	releaseAssets = shadowJar.archiveFile
	releaseName = "Minecraft ${minecraft_version_tag} (Forge) / v${mod_version}"
	repo = 'minecraft-prometheus-exporter'
	tagName = "${minecraft_version_tag}-forge-${mod_version}"
	targetCommitish = github_branch
	token = github_token ?: ""
}

// Alias for publishing to GitHub.
tasks.register('publishGithub')
tasks.publishGithub.dependsOn tasks.githubRelease

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
